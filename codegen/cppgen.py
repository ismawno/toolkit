from contextlib import contextmanager
from pathlib import Path

import sys

sys.path.append(str(Path(__file__).parent.parent))

from convoy import Convoy

import shutil


class CPPFile:
    def __init__(self, name: str, /):
        self.__name = name
        self.__file = ""
        self.__indents = 0
        self.__doc = False

    def __call__(self, line: str, /, *, indent: int | None = None) -> None:
        tabs = " " * (self.__indents if indent is None else indent)
        pfix = " * " if self.__doc else ""
        self.__file += f"{tabs}{pfix}{line}\n"

    @property
    def name(self) -> str:
        return self.__name

    def disclaimer(self, ffile: str, /) -> None:
        self(f"// Generated by Convoy reflection script: '{ffile}'")

    def include(self, header: str, /, *, quotes: bool = False) -> None:
        if quotes:
            self(f'#include "{header}"')
        else:
            self(f"#include <{header}>")

    def comment(self, msg: str, /) -> None:
        msgs = msg.split("\n")
        for msg in msgs:
            self(f"// {msg}")

    def brief(self, msg: str, /) -> None:
        self.__assert_doc()
        self(f"@brief {msg}")
        self("")

    def param(self, param: str, msg: str, /) -> None:
        self.__assert_doc()
        self(f"@param {param} {msg}")

    def tparam(self, param: str, msg: str, /) -> None:
        self.__assert_doc()
        self(f"@tparam {param} {msg}")

    def ret(self, msg: str, /) -> None:
        self.__assert_doc()
        self(f"@return {msg}")

    @contextmanager
    def doc(self):
        try:
            self("/**")
            self.__doc = True
            yield
        finally:
            self.__doc = False
            self(" */")

    def spacing(self, n: int = 1, /) -> None:
        for _ in range(n):
            self("")

    @contextmanager
    def scope(
        self,
        name: str | None = None,
        /,
        *,
        opener: str = "{",
        closer: str = "}",
        delimiters: bool = True,
        indent: int = 4,
    ):
        try:
            if name is not None:
                self(name)
            if delimiters and opener:
                self(opener)
            self.__indents += indent
            yield
        finally:
            self.__indents -= indent
            if delimiters and closer:
                self(closer)

    def write(self, path: Path | None = None, /) -> None:
        if path is None:
            path = Path(self.__name)
        else:
            path = path / self.__name

        path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("w") as file:
            file.write(self.__file)

        Convoy.verbose(
            f"Exported generated code to <underline>{path.resolve()}</underline>. Attempting to format with <bold>clang-format</bold>."
        )
        cfpath = shutil.which("clang-format")
        if cfpath is None:
            Convoy.verbose("<fyellow><bold>clang-format</bold> was not found.")
            return

        if Convoy.run_process_success([str(cfpath), "-i", str(path)]):
            Convoy.verbose("Successfully formatted.")
        else:
            Convoy.verbose("<fyellow>Failed to run <bold>clang-format</bold>.")

    def __assert_doc(self) -> None:
        if not self.__doc:
            Convoy.exit_error("Cannot call documentation methods when not in a <bold>doc()</bold> block.")
